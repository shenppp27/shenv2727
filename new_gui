-- üå± Grow a Garden Script Hub
-- Version: 1.2 (Added All Seeds)
-- Compatible with Delta Executor
-- Created by ShenEnv
-- GitHub: https://github.com/shenppp27/shenv2727

-- Security check
if not game:GetService("Players").LocalPlayer then
    warn("‚ùå Script failed to load: Player not found")
    return
end

-- Anti-duplicate check
if _G.GrowGardenLoaded then
    warn("‚ö†Ô∏è Grow Garden Script already loaded!")
    return
end
_G.GrowGardenLoaded = true

print("üîÑ Loading Grow a Garden Script...")

local success, err = pcall(function()
    -- Services
    local Players = game:GetService("Players")
    local TweenService = game:GetService("TweenService")
    local UserInputService = game:GetService("UserInputService")
    local CoreGui = game:GetService("CoreGui")
    local RunService = game:GetService("RunService")
    local Workspace = game:GetService("Workspace")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")

    local player = Players.LocalPlayer
    local mouse = player:GetMouse()

    -- All available seeds
    local allSeeds = {
        "Carrot", "Strawberry", "Blueberry", "Tomato", "Corn", 
        "Daffodil", "Watermelon", "Pumpkin", "Apple", "Bamboo", 
        "Coconut", "Cactus", "Mango", "Pepper", "Grape", 
        "Mushroom", "Cacao", "Beanstalk"
    }

    -- Farming Variables
    local autoCollectFruits = false
    local autoBuyAllSeeds = false
    local autoCollectConnection = nil
    local autoBuyConnection = nil

    -- Movement Variables
    local speedEnabled = false
    local jumpEnabled = false
    local originalWalkSpeed = 16
    local originalJumpPower = 50

    -- Game Events
    local playerScripts = player:WaitForChild("PlayerScripts")
    local inputGateway = playerScripts:WaitForChild("InputGateway")
    local activation = inputGateway:WaitForChild("Activation")
    local gameEvents = ReplicatedStorage:WaitForChild("GameEvents")
    local buySeedStock = gameEvents:WaitForChild("BuySeedStock")
    local saveSlotService = gameEvents:WaitForChild("SaveSlotService")
    local rememberUnlockage = saveSlotService:WaitForChild("RememberUnlockage")

    -- Function to collect fruit
    local function collectFruit(position)
        local success, err = pcall(function()
            local args = {true, position}
            activation:FireServer(unpack(args))
        end)
        if not success then
            warn("Failed to collect fruit:", err)
        end
    end

    -- Function to buy specific seed
    local function buySeed(seedName)
        local success, err = pcall(function()
            local args = {seedName}
            buySeedStock:FireServer(unpack(args))
            rememberUnlockage:FireServer()
        end)
        return success
    end

    -- Function to buy all seeds
    local function buyAllSeeds()
        local purchased = 0
        local failed = 0
        
        for _, seedName in pairs(allSeeds) do
            local success = buySeed(seedName)
            if success then
                purchased = purchased + 1
                print("üå± Bought: " .. seedName)
            else
                failed = failed + 1
                warn("‚ùå Failed to buy: " .. seedName)
            end
            wait(0.1) -- Small delay between purchases
        end
        
        return purchased, failed
    end

    -- Movement Functions
    local function setWalkSpeed(speed)
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.WalkSpeed = speed
        end
    end

    local function setJumpPower(power)
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.JumpPower = power
        end
    end

    -- Find fruits in workspace
    local function findFruits()
        local fruits = {}
        local possibleFolders = {"Fruits", "Items", "Collectibles", "Drops"}
        
        for _, folderName in pairs(possibleFolders) do
            local folder = Workspace:FindFirstChild(folderName)
            if folder then
                for _, item in pairs(folder:GetChildren()) do
                    if item:IsA("Model") or item:IsA("Part") then
                        local itemName = item.Name:lower()
                        if itemName:find("fruit") or itemName:find("carrot") or itemName:find("strawberry") or 
                           itemName:find("blueberry") or itemName:find("tomato") or itemName:find("corn") or
                           itemName:find("watermelon") or itemName:find("pumpkin") or itemName:find("apple") or
                           itemName:find("mango") or itemName:find("grape") or itemName:find("coin") or itemName:find("gem") then
                            table.insert(fruits, item)
                        end
                    end
                end
            end
        end
        
        for _, item in pairs(Workspace:GetChildren()) do
            if item:IsA("Model") or item:IsA("Part") then
                local itemName = item.Name:lower()
                if itemName:find("fruit") or itemName:find("carrot") or itemName:find("strawberry") or 
                   itemName:find("blueberry") or itemName:find("tomato") or itemName:find("corn") or
                   itemName:find("watermelon") or itemName:find("pumpkin") or itemName:find("apple") or
                   itemName:find("mango") or itemName:find("grape") or itemName:find("coin") or itemName:find("gem") then
                    table.insert(fruits, item)
                end
            end
        end
        
        return fruits
    end

    -- Get distance to fruit
    local function getDistance(fruit)
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
            return math.huge
        end
        local playerPos = player.Character.HumanoidRootPart.Position
        local fruitPos = fruit:IsA("Model") and fruit.PrimaryPart and fruit.PrimaryPart.Position or fruit.Position
        return (playerPos - fruitPos).Magnitude
    end

    -- Auto collect loop
    local function autoCollectLoop()
        if not autoCollectFruits then return end
        
        local fruits = findFruits()
        local maxDistance = 50
        local collected = 0
        
        for _, fruit in pairs(fruits) do
            if not fruit or not fruit.Parent then continue end
            
            local distance = getDistance(fruit)
            if distance <= maxDistance then
                local fruitCFrame
                if fruit:IsA("Model") and fruit.PrimaryPart then
                    fruitCFrame = fruit.PrimaryPart.CFrame
                elseif fruit:IsA("Part") then
                    fruitCFrame = fruit.CFrame
                else
                    continue
                end
                
                collectFruit(fruitCFrame)
                collected = collected + 1
                wait(0.1)
            end
        end
        
        if collected > 0 then
            print("üå± Collected " .. collected .. " items!")
        end
    end

    -- Auto buy all seeds loop
    local function autoBuyAllSeedsLoop()
        if not autoBuyAllSeeds then return end
        
        local purchased, failed = buyAllSeeds()
        if purchased > 0 then
            print("üå± Auto-bought " .. purchased .. " seed types!")
        end
        wait(10) -- Wait 10 seconds between bulk purchases
    end

    -- Clean up existing GUI
    if CoreGui:FindFirstChild("GrowGardenGUI") then
        CoreGui:FindFirstChild("GrowGardenGUI"):Destroy()
        wait(0.1)
    end

    -- Create main ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "GrowGardenGUI"
    screenGui.Parent = CoreGui
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.ResetOnSpawn = false

    -- Main Frame (made larger for more features)
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Parent = screenGui
    mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
    mainFrame.BorderSizePixel = 0
    mainFrame.Position = UDim2.new(0.5, -175, 0.5, -200)
    mainFrame.Size = UDim2.new(0, 350, 0, 400)
    mainFrame.Active = true
    mainFrame.Draggable = true

    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 10)
    mainCorner.Parent = mainFrame

    -- Top Bar
    local topBar = Instance.new("Frame")
    topBar.Name = "TopBar"
    topBar.Parent = mainFrame
    topBar.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
    topBar.BorderSizePixel = 0
    topBar.Size = UDim2.new(1, 0, 0, 35)

    local topBarCorner = Instance.new("UICorner")
    topBarCorner.CornerRadius = UDim.new(0, 10)
    topBarCorner.Parent = topBar

    -- Title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Parent = topBar
    titleLabel.BackgroundTransparency = 1
    titleLabel.Position = UDim2.new(0, 10, 0, 0)
    titleLabel.Size = UDim2.new(0, 250, 1, 0)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Text = "üå± Grow a Garden Hub v1.2"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextSize = 14
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left

    -- Close Button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Parent = topBar
    closeButton.BackgroundColor3 = Color3.fromRGB(255, 96, 96)
    closeButton.BorderSizePixel = 0
    closeButton.Position = UDim2.new(1, -30, 0, 5)
    closeButton.Size = UDim2.new(0, 25, 0, 25)
    closeButton.Font = Enum.Font.GothamBold
    closeButton.Text = "‚úï"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextSize = 12

    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 5)
    closeCorner.Parent = closeButton

    -- Content Frame with scroll
    local contentFrame = Instance.new("ScrollingFrame")
    contentFrame.Name = "Content"
    contentFrame.Parent = mainFrame
    contentFrame.BackgroundTransparency = 1
    contentFrame.Position = UDim2.new(0, 15, 0, 45)
    contentFrame.Size = UDim2.new(1, -30, 1, -60)
    contentFrame.CanvasSize = UDim2.new(0, 0, 0, 550) -- Scroll for more content
    contentFrame.ScrollBarThickness = 6
    contentFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)

    local contentLayout = Instance.new("UIListLayout")
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout.Padding = UDim.new(0, 8)
    contentLayout.Parent = contentFrame

    -- Create Button Function
    local function createButton(text, color, callback)
        local button = Instance.new("TextButton")
        button.Parent = contentFrame
        button.BackgroundColor3 = color
        button.BorderSizePixel = 0
        button.Size = UDim2.new(1, 0, 0, 32)
        button.Font = Enum.Font.Gotham
        button.Text = text
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.TextSize = 11
        
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 6)
        buttonCorner.Parent = button
        
        button.MouseButton1Click:Connect(function()
            pcall(callback)
        end)
        
        -- Hover Effect
        button.MouseEnter:Connect(function()
            TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.new(math.min(color.R + 0.1, 1), math.min(color.G + 0.1, 1), math.min(color.B + 0.1, 1))}):Play()
        end)
        
        button.MouseLeave:Connect(function()
            TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = color}):Play()
        end)
        
        return button
    end

    -- Create Toggle Function
    local function createToggle(text, callback)
        local toggleFrame = Instance.new("Frame")
        toggleFrame.Parent = contentFrame
        toggleFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
        toggleFrame.BorderSizePixel = 0
        toggleFrame.Size = UDim2.new(1, 0, 0, 32)
        
        local toggleCorner = Instance.new("UICorner")
        toggleCorner.CornerRadius = UDim.new(0, 6)
        toggleCorner.Parent = toggleFrame
        
        local toggleLabel = Instance.new("TextLabel")
        toggleLabel.Parent = toggleFrame
        toggleLabel.BackgroundTransparency = 1
        toggleLabel.Position = UDim2.new(0, 10, 0, 0)
        toggleLabel.Size = UDim2.new(1, -50, 1, 0)
        toggleLabel.Font = Enum.Font.Gotham
        toggleLabel.Text = text
        toggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        toggleLabel.TextSize = 11
        toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
        
        local toggleButton = Instance.new("TextButton")
        toggleButton.Parent = toggleFrame
        toggleButton.BackgroundColor3 = Color3.fromRGB(255, 96, 96)
        toggleButton.BorderSizePixel = 0
        toggleButton.Position = UDim2.new(1, -30, 0, 6)
        toggleButton.Size = UDim2.new(0, 20, 0, 20)
        toggleButton.Text = ""
        
        local toggleButtonCorner = Instance.new("UICorner")
        toggleButtonCorner.CornerRadius = UDim.new(0, 10)
        toggleButtonCorner.Parent = toggleButton
        
        local isToggled = false
        
        toggleButton.MouseButton1Click:Connect(function()
            isToggled = not isToggled
            
            if isToggled then
                TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(96, 255, 96)}):Play()
            else
                TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(255, 96, 96)}):Play()
            end
            
            pcall(callback, isToggled)
        end)
        
        return toggleFrame
    end

    -- Create notification
    local function createNotification(text)
        local notif = Instance.new("Frame")
        notif.Parent = screenGui
        notif.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
        notif.BorderSizePixel = 0
        notif.Position = UDim2.new(1, 10, 0, 50)
        notif.Size = UDim2.new(0, 200, 0, 50)
        
        local notifCorner = Instance.new("UICorner")
        notifCorner.CornerRadius = UDim.new(0, 6)
        notifCorner.Parent = notif
        
        local notifText = Instance.new("TextLabel")
        notifText.Parent = notif
        notifText.BackgroundTransparency = 1
        notifText.Position = UDim2.new(0, 5, 0, 5)
        notifText.Size = UDim2.new(1, -10, 1, -10)
        notifText.Font = Enum.Font.Gotham
        notifText.Text = text
        notifText.TextColor3 = Color3.fromRGB(255, 255, 255)
        notifText.TextSize = 10
        notifText.TextWrapped = true
        
        TweenService:Create(notif, TweenInfo.new(0.3), {Position = UDim2.new(1, -210, 0, 50)}):Play()
        
        spawn(function()
            wait(3)
            TweenService:Create(notif, TweenInfo.new(0.3), {Position = UDim2.new(1, 10, 0, 50)}):Play()
            wait(0.3)
            notif:Destroy()
        end)
    end

    -- GUI Content
    
    -- Farming Features
    createToggle("üçé Auto Collect Fruits", function(state)
        autoCollectFruits = state
        
        if state then
            createNotification("üçé Auto Collect: ON")
            if autoCollectConnection then
                autoCollectConnection:Disconnect()
            end
            autoCollectConnection = RunService.Heartbeat:Connect(function()
                spawn(autoCollectLoop)
                wait(0.5)
            end)
        else
            createNotification("üçé Auto Collect: OFF")
            if autoCollectConnection then
                autoCollectConnection:Disconnect()
                autoCollectConnection = nil
            end
        end
    end)

    createButton("üçé Collect Fruits Once", Color3.fromRGB(255, 140, 0), function()
        spawn(autoCollectLoop)
        createNotification("üçé Collecting fruits...")
    end)

    -- Seed Purchase Features
    createButton("üå± BUY ALL SEEDS", Color3.fromRGB(34, 139, 34), function()
        createNotification("üå± Buying all seeds...")
        spawn(function()
            local purchased, failed = buyAllSeeds()
            createNotification("üå± Bought " .. purchased .. " seeds!\n‚ùå Failed: " .. failed)
        end)
    end)

    createToggle("üå± Auto Buy All Seeds", function(state)
        autoBuyAllSeeds = state
        
        if state then
            createNotification("üå± Auto Buy All: ON")
            if autoBuyConnection then
                autoBuyConnection:Disconnect()
            end
            autoBuyConnection = RunService.Heartbeat:Connect(function()
                spawn(autoBuyAllSeedsLoop)
                wait(10)
            end)
        else
            createNotification("üå± Auto Buy All: OFF")
            if autoBuyConnection then
                autoBuyConnection:Disconnect()
                autoBuyConnection = nil
            end
        end
    end)

    -- Individual seed buttons (compact)
    createButton("ü•ï Carrot", Color3.fromRGB(255, 140, 0), function()
        local success = buySeed("Carrot")
        createNotification(success and "ü•ï Carrot bought!" or "ü•ï Failed!")
    end)

    createButton("üçì Strawberry", Color3.fromRGB(220, 20, 60), function()
        local success = buySeed("Strawberry")
        createNotification(success and "üçì Strawberry bought!" or "üçì Failed!")
    end)

    createButton("ü´ê Blueberry", Color3.fromRGB(75, 0, 130), function()
        local success = buySeed("Blueberry")
        createNotification(success and "ü´ê Blueberry bought!" or "ü´ê Failed!")
    end)

    createButton("üçÖ Tomato", Color3.fromRGB(255, 99, 71), function()
        local success = buySeed("Tomato")
        createNotification(success and "üçÖ Tomato bought!" or "üçÖ Failed!")
    end)

    createButton("üåΩ Corn", Color3.fromRGB(255, 215, 0), function()
        local success = buySeed("Corn")
        createNotification(success and "üåΩ Corn bought!" or "üåΩ Failed!")
    end)

    -- Movement Features
    createToggle("‚ö° Fast Walk Speed", function(state)
        speedEnabled = state
        
        if state then
            setWalkSpeed(100)
            createNotification("‚ö° Fast Speed: ON")
        else
            setWalkSpeed(originalWalkSpeed)
            createNotification("‚ö° Fast Speed: OFF")
        end
    end)

    createToggle("ü¶ò High Jump", function(state)
        jumpEnabled = state
        
        if state then
            setJumpPower(150)
            createNotification("ü¶ò High Jump: ON")
        else
            setJumpPower(originalJumpPower)
            createNotification("ü¶ò High Jump: OFF")
        end
    end)

    createButton("üéÅ Collect at Mouse", Color3.fromRGB(138, 43, 226), function()
        if mouse.Hit then
            collectFruit(CFrame.new(mouse.Hit.Position))
            createNotification("üéÅ Collecting at mouse...")
        end
    end)

    -- Character respawn handler
    player.CharacterAdded:Connect(function(character)
        character:WaitForChild("Humanoid")
        wait(1)
        
        if speedEnabled then
            setWalkSpeed(100)
        end
        if jumpEnabled then
            setJumpPower(150)
        end
    end)

    -- Events
    closeButton.MouseButton1Click:Connect(function()
        _G.GrowGardenLoaded = false
        if autoCollectConnection then autoCollectConnection:Disconnect() end
        if autoBuyConnection then autoBuyConnection:Disconnect() end
        
        setWalkSpeed(originalWalkSpeed)
        setJumpPower(originalJumpPower)
        
        screenGui:Destroy()
    end)

    -- Entrance Animation
    mainFrame.Size = UDim2.new(0, 0, 0, 0)
    mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)

    TweenService:Create(mainFrame, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        Size = UDim2.new(0, 350, 0, 400),
        Position = UDim2.new(0.5, -175, 0.5, -200)
    }):Play()

    -- Keybind
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == Enum.KeyCode.RightControl then
            screenGui.Enabled = not screenGui.Enabled
        end
    end)

    print("‚úÖ Grow a Garden Script v1.2 Loaded!")
    print("üå± All " .. #allSeeds .. " seed types supported!")
    createNotification("üå± Garden Script Ready!\nüå± All " .. #allSeeds .. " seeds supported!")
end)

if not success then
    warn("‚ùå Failed to load: " .. tostring(err))
end 
